{"version":3,"sources":["components/AuthForm.js","App.js","components/Home.js","auth.js","serviceWorker.js","history.js","index.js"],"names":["AuthForm","props","useState","isOpen","setIsOpen","email","password","credentials","setCredentials","localStorageAuth","setlocalStorageAuth","toggle","logo2","alt","src","width","loginBtn","Button","className","onClick","outline","color","logoutButton","auth","logout","history","replace","useEffect","localStorage","setItem","JSON","stringify","console","log","loggedIn","Navbar","light","expand","NavbarBrand","href","Modal","ModalHeader","ModalBody","InputGroup","InputGroupAddon","addonType","Input","onChange","e","target","value","prevState","placeholder","type","name","id","preventDefault","login","then","res","catch","err","alert","App","Home","getUserName","getItem","getToken","Alert","Auth","domain","this","url","fetch","bind","getProfile","method","body","setToken","Promise","resolve","token","isTokenExpired","decode","exp","Date","now","idToken","removeItem","options","headers","_checkStatus","response","json","status","error","Error","statusText","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","createHistory","basename","ReactDOM","render","path","Component","component","rest","to","pathname","from","exac","document","getElementById","URL","process","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f7763eef.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport {\n  Navbar,\n  NavbarBrand,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Input,\n  InputGroup,\n  InputGroupAddon  } from 'reactstrap';\n\n  const AuthForm = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [credentials, setCredentials] = useState({\n      email:'',\n      password: ''\n    })\n    const [localStorageAuth, setlocalStorageAuth] = useState('');\n    const toggle = () => setIsOpen(!isOpen);\n    const logo2 = <img alt=\"Logo\" src=\"https://assets.tractionco.com/static/img/traction_bug.svg\" width=\"80px;\"/>\n    const logout = () =>{\n      props.auth.logout();\n      props.history.replace('/');\n    }\n    const loginBtn = <Button className=\"col-sm-1 offset-sm-9\" onClick={()=>{setIsOpen(true)}} outline color=\"info\">Sign In</Button>\n    const logoutButton = <Button className=\"col-sm-1 offset-sm-9\" onClick={logout} outline color=\"info\">Sign Out</Button>\n    const changeHandleUid = (e) => {\n      const { email, value } =  e.target;\n      setCredentials(prevState => ({\n        ...prevState, email: value\n      }))\n    }\n    const changeHandlePwd = (e) => {\n      const { password, value } =  e.target;\n      setCredentials(prevState => ({\n        ...prevState, password: value\n      }))\n    }\n    const authenticate = (e) => {\n      e.preventDefault();\n      props.auth.login(credentials)\n        .then(res =>{\n          setlocalStorageAuth(res);\n          setIsOpen(false)\n           props.history.replace('/Home');\n          }).catch(err =>{alert(err)})\n    }\n\n    useEffect(() => {\n      localStorage.setItem('currentUser', JSON.stringify(localStorageAuth));\n      localStorage.setItem('user', JSON.stringify(credentials.email))\n    }, [localStorageAuth]);\n\n    console.log('auth', props.auth.loggedIn())\n    return (\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand href=\"/\">{logo2}</NavbarBrand>\n        {props.auth.loggedIn() === true ? logoutButton : loginBtn }\n        <Modal isOpen={isOpen} toggle={toggle}>\n          <ModalHeader toggle={toggle}> Sign in </ModalHeader>\n           <ModalBody>\n               <InputGroup>\n                 <InputGroupAddon addonType=\"prepend\">email</InputGroupAddon>\n                 <Input onChange={changeHandleUid} placeholder=\"username\" />\n               </InputGroup>\n               <br />\n               <InputGroup>\n                 <Input type=\"password\" onChange={changeHandlePwd} name=\"password\" id=\"password\" placeholder=\"password\" />\n               </InputGroup>\n               <br />\n               <Button onClick={authenticate} type=\"submit\">Submit</Button>\n           </ModalBody>\n        </Modal>\n      </Navbar>\n    )\n }\n\nexport default AuthForm;\n","import React from 'react';\n\nimport AuthForm from './components/AuthForm';\nimport './App.css';\n\n\n\nconst App = (props) => {\n\n  return (\n    <div>\n       <AuthForm  {...props}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Alert } from 'reactstrap';\nimport './components.css';\n\n const Home = (props) => {\n   const getUserName = localStorage.getItem('user');\n   const getAllUsersInChat = () =>{}\n   console.log(props.auth.getToken());\n    return (\n      <div className=\"wrapper\">\n        <aside className=\"chat_users\">\n          <p>In Chat Room</p>\n          <Alert color=\"success\">\n             { getUserName ?  getUserName : '' }\n          </Alert>\n        </aside>\n        <article className=\"chat_messages\">\n          <Alert color=\"primary\" className=\"message userMessage\">\n              This is a primary alert with <a href=\"#\" className=\"alert-link\">an example link</a>. Give it a click if you like.\n          </Alert>\n          <Alert color=\"info\" className=\"message guest_message\">\n              This is a primary alert with  Give it a click if you like.\n          </Alert>\n        </article>\n      </div>\n    );\n}\n\n\nexport default Home\n","\nimport decode from 'jwt-decode';\n\nclass Auth {\n  constructor(domain) {\n       this.url = 'http://localhost:3003' // API server domain\n       this.fetch = this.fetch.bind(this) // React binding stuff\n       this.login = this.login.bind(this)\n       this.logout = this.logout.bind(this)\n       this.loggedIn = this.loggedIn.bind(this)\n       this.getProfile = this.getProfile.bind(this)\n   }\n   login(credentials) {\n     debugger\n     const {email, password} = credentials;\n         // Get a token from api server using the fetch api\n         return this.fetch(`${this.url}/auth/login`, {\n             method: 'POST',\n             body: JSON.stringify({\n                 email,\n                 password\n             })\n         }).then(res => {\n             this.setToken(res) // Setting the token in localStorage\n             return Promise.resolve(res);\n         })\n     }\n\n     loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken() // GEtting token from localstorage\n      return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    setToken(idToken) {\n      debugger\n       // Saves user token to localStorage\n       localStorage.setItem('currentUser', idToken)\n    }\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('currentUser')\n    }\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('currentUser');\n    }\n    getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n    }\n    fetch(url, options) {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            'Content-Type': 'application/json'\n        }\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers['Authorization'] = 'Bearer ' + this.getToken()\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        })\n            .then(this._checkStatus)\n            .then(response => response.json())\n    }\n\n    _checkStatus(response) {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) { // Success status lies between 200 to 300\n            return response\n        } else {\n            var error = new Error(response.statusText)\n            error.response = response\n            throw error\n        }\n    }\n}\n\n\nexport default Auth;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport createHistory from 'history/createBrowserHistory';\n\nexport default createHistory({\n  basename: process.env.NODE_ENV === 'development' ? '/' : '/todomvc-auth-client'\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect } from \"react-router-dom\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport Home from './components/Home';\nimport Auth from './auth';\nimport * as serviceWorker from './serviceWorker';\nimport history from './history';\n\nconst auth = new Auth();\nconsole.log(auth.loggedIn());\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        auth.loggedIn() ? (\n          <Component {...props} auth={auth}/>\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nReactDOM.render(\n   <Router history={history}>\n        <Route path=\"/\" render={(props) => <App {...props} auth={auth}/>} />\n        <PrivateRoute exac path=\"/home\" auth={auth} component={Home}/>\n  </Router>\n   , document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}